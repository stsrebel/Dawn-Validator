const axios = require('axios');
const https = require('https');
const accountsData = require('./accounts');
const proxies = require('./proxy');
const config = require('./config');

const apiEndpoints = {
    keepalive: "https://www.aeropres.in/chromeapi/dawn/v1/userreward/keepalive",
    getPoints: "https://www.aeropres.in/api/atom/v1/userreferral/getpoint"
};

const ignoreSslAgent = new https.Agent({  
    rejectUnauthorized: false
});

const randomDelay = (min, max) => {
    return new Promise(resolve => {
        const delayTime = Math.floor(Math.random() * (max - min + 1)) + min;
        setTimeout(resolve, delayTime * 1000);
    });
};

const displayWelcome = () => {
    console.log(`
    
    
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ñà‚ñà‚ïë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù
      üá™‚Äã‚Äã‚Äã‚Äã‚ÄãüáΩ‚Äã‚Äã‚Äã‚Äã‚Äãüáπ‚Äã‚Äã‚Äã‚Äã‚Äãüá™‚Äã‚Äã‚Äã‚Äã‚Äãüá≥‚Äã‚Äã‚Äã‚Äã‚Äãüá∏‚Äã‚Äã‚Äã‚Äã‚ÄãüáÆ‚Äã‚Äã‚Äã‚Äã‚Äãüá¥‚Äã‚Äã‚Äã‚Äã‚Äãüá≥‚Äã‚Äã‚Äã‚Äã‚Äã | AUTO CLAIM
    
   ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ
   ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñà‚ñÑ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñÑ‚ñà
    
    `);
};

const fetchPoints = async (headers) => {
    try {
        const response = await axios.get(apiEndpoints.getPoints, { headers, httpsAgent: ignoreSslAgent });
        if (response.status === 200 && response.data.status) {
            const { rewardPoint, referralPoint } = response.data.data;
            const totalPoints = (
                (rewardPoint.points || 0) +
                (rewardPoint.registerpoints || 0) +
                (rewardPoint.signinpoints || 0) +
                (rewardPoint.twitter_x_id_points || 0) +
                (rewardPoint.discordid_points || 0) +
                (rewardPoint.telegramid_points || 0) +
                (rewardPoint.bonus_points || 0) +
                (referralPoint.commission || 0)
            );
			console.log(` `);
            console.log(`üìä Points: ${totalPoints}`);
            return totalPoints;
        } else {
            console.error(`‚ùå Failed to retrieve the points: ${response.data.message || 'Unknown error'}`);
        }
    } catch (error) {
        console.error(`‚ö†Ô∏è Error during fetching the points: ${error.message}`);
    }
    return 0;
};

const keepAliveRequest = async (headers, email) => {
    const payload = {
        username: email,
        extensionid: "fpdkjdnhkakefebpekbdhillbhonfjjp",
        numberoftabs: 0,
        _v: "1.0.8"
    };
    
    try {
        const response = await axios.post(apiEndpoints.keepalive, payload, { headers, httpsAgent: ignoreSslAgent });
        if (response.status === 200) {
            console.log(`‚úÖ Keep-Alive Success for ${email}: ${response.data.message}`);
            return true;
        } else {
            console.warn(`üö´ Keep-Alive Error for ${email}: ${response.status} - ${response.data.message || 'Unknown error'}`);
        }
    } catch (error) {
        console.error(``);
    }
    return false;
};

const countdown = async (seconds) => {
    for (let i = seconds; i > 0; i--) {
        process.stdout.write(`‚è≥ Next process in: ${i} seconds...\r`);
        await randomDelay(1, 1);
    }
    console.log("\nüîÑ Restarting...\n");
};

const countdownAccountDelay = async (seconds) => {
    for (let i = seconds; i > 0; i--) {
        process.stdout.write(`‚è≥ Please Wait: ${i} seconds...\r`);
        await randomDelay(1, 1);
    }
    console.log("\n");
};

const processAccounts = async () => {
    displayWelcome();
    const totalProxies = proxies.length;

    while (true) {
        let totalPoints = 0;

        for (let i = 0; i < accountsData.length; i++) {
            const { email, token } = accountsData[i];
            const proxy = config.useProxy ? proxies[i % totalProxies] : undefined;

            const headers = {
                "Accept": "*/*",
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json",
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
            };

            if (proxy) headers['Proxy'] = proxy;
            console.log(`----------------------------------------------------------------`);
            console.log(`üîç Account: ${email} using proxy: ${proxy || 'No Proxy'}...`);
            const points = await fetchPoints(headers);
            totalPoints += points;

            if (points > 0) {
                const success = await keepAliveRequest(headers, email);
                if (!success) {
                    console.log(`‚úÖ Keep-Alive Success for ${email} account.\n`);
                }
            } else {
                console.error(`‚ùå No points available for ${email}.`);
                console.log(`----------------------------------------------------------------`);
            }

            await countdownAccountDelay(config.accountDelay);
        }

        console.log(`üìã All accounts processed. Total points: ${totalPoints}`);
        await countdown(config.restartDelay);
    }
};

processAccounts();
